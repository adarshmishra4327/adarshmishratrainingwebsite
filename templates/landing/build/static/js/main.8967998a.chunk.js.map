{"version":3,"sources":["pages/Layouts/loading.js","App.js","serviceWorker.js","index.js"],"names":["Loading","props","state","Fragment","id","className","Component","homeAgency","React","lazy","homeApp","homeBusiness","homeMultipurpose","homeSoftware","homeStartup","App","Suspense","fallback","path","component","withRouter","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAuBeA,E,kDAnBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,0CAKnB,WAEI,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,GAAG,aACJ,yBAAKA,GAAG,UACJ,yBAAKC,UAAU,WAAf,qB,GAbFC,aCOhBC,G,MAAaC,IAAMC,MAAK,kBAAM,sEAC9BC,EAAUF,IAAMC,MAAK,kBAAM,sEAC3BE,EAAeH,IAAMC,MAAK,kBAAM,8EAChCG,EAAmBJ,IAAMC,MAAK,kBAAM,6EACpCI,EAAeL,IAAMC,MAAK,kBAAM,+DAChCK,EAAcN,IAAMC,MAAK,kBAAM,sEAE/BM,E,4JAEJ,WAEE,OACE,kBAAC,IAAMZ,SAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAMa,SAAP,CAAgBC,SAAU,6BAAK,kBAAC,EAAD,QAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eAAeC,UAAWZ,IACtC,kBAAC,IAAD,CAAOW,KAAK,YAAYC,UAAWT,IACnC,kBAAC,IAAD,CAAOQ,KAAK,iBAAiBC,UAAWR,IACxC,kBAAC,IAAD,CAAOO,KAAK,qBAAqBC,UAAWP,IAC5C,kBAAC,IAAD,CAAOM,KAAK,iBAAiBC,UAAWN,IACxC,kBAAC,IAAD,CAAOK,KAAK,gBAAgBC,UAAWL,IACvC,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWZ,Y,GAfvBD,aA0BHc,cAAWL,GC9BNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EACE,kBAAC,IAAD,KACI,kBAAC,EAAD,OAIZC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SDqHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8967998a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Loading extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div id=\"preloader\">\r\n                    <div id=\"status\">\r\n                        <div className=\"spinner\">Loading...</div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loading;\r\n\r\n\r\n","import React, { Component } from 'react';\nimport { Route, Switch, BrowserRouter as Router, withRouter } from 'react-router-dom';\n\nimport Loading from './pages/Layouts/loading';\n\n// Import css\nimport './Apps.scss';\n\n// Import all components\nconst homeAgency = React.lazy(() => import('./pages/home-agency'));\nconst homeApp = React.lazy(() => import('./pages/home-app'));\nconst homeBusiness = React.lazy(() => import('./pages/home-business'));\nconst homeMultipurpose = React.lazy(() => import('./pages/home-multipurpose'));\nconst homeSoftware = React.lazy(() => import('./pages/home-software'));\nconst homeStartup = React.lazy(() => import('./pages/home-startup'));\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <React.Fragment>\n        <Router>\n          <React.Suspense fallback={<div><Loading /></div>}>\n            <Switch>\n              <Route path=\"/home-agency\" component={homeAgency} />\n              <Route path=\"/home-app\" component={homeApp} />\n              <Route path=\"/home-business\" component={homeBusiness} />\n              <Route path=\"/home-multipurpose\" component={homeMultipurpose} />\n              <Route path=\"/home-software\" component={homeSoftware} />\n              <Route path=\"/home-startup\" component={homeStartup} />\n              <Route path=\"/\" component={homeAgency} />\n            </Switch>\n          </React.Suspense>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\n\n\nexport default withRouter(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst app = (\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n);\n\nReactDOM.render(app, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}